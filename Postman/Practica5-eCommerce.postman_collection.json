{
	"info": {
		"_postman_id": "e5182d35-cda7-42fa-90f3-1d8864063444",
		"name": "Practica 5 - eCommerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7035805"
	},
	"item": [
		{
			"name": "ObtenerCategoria2020yPrecio-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response contenga el contenido del response\",()=>{\r",
							"    pm.expect(pm.response.text()).to.include(\"/anuncios/mexico/autos-y-camionetas?precio=-60000\");\r",
							"});\r",
							"const responseJ =pm.response.json().data;\r",
							"pm.test(\"Validar que el urls array response contenga el contenido correcto\",()=>{\r",
							"    pm.expect(responseJ.urls).to.have.members([\"/anuncios/mexico/autos-y-camionetas?precio=-60000\",\"/anuncios/mexico/autos-y-camionetas?precio=60000-80000\",\"/anuncios/mexico/autos-y-camionetas?precio=80000-100000\",\"/anuncios/mexico/autos-y-camionetas?precio=100000-150000\",\"/anuncios/mexico/autos-y-camionetas?precio=150000-\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el urls array response sea de tipo array\",()=>{\r",
							"    pm.expect(responseJ.urls).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el key website no este definido\",()=>{\r",
							"    pm.expect(pm.response.website).to.be.undefined;\r",
							"});\r",
							"\r",
							"const schemaResponseStructure = {\r",
							"  \"data\": {\r",
							"    \"urls\": [\r",
							"    ]\r",
							"  }\r",
							"};\r",
							"pm.test('Validar que el esquema de la respuesta sea correcta', function() {\r",
							"  pm.response.to.have.jsonSchema(schemaResponseStructure);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": "https://www.segundamano.mx",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "https://www.segundamano.mx",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"filters\": [\r\n        {\r\n            \"price\": \"-60000\",\r\n            \"category\": \"2020\"\r\n        },\r\n        {\r\n            \"price\": \"60000-80000\",\r\n            \"category\": \"2020\"\r\n        },\r\n        {\r\n            \"price\": \"80000-100000\",\r\n            \"category\": \"2020\"\r\n        },\r\n        {\r\n            \"price\": \"100000-150000\",\r\n            \"category\": \"2020\"\r\n        },\r\n        {\r\n            \"price\": \"150000-\",\r\n            \"category\": \"2020\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/urls/v1/public/ad-listing?lang=es",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"urls",
						"v1",
						"public",
						"ad-listing"
					],
					"query": [
						{
							"key": "lang",
							"value": "es"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ObtenerListadoAnuncios-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el campo token regresa un dato tipo STRING\", function(){\r",
							"    var subject = pm.response.json().data.items[0].subject;\r",
							"    pm.expect(subject).to.be.a(\"String\")\r",
							"});\r",
							"\r",
							"pm.test(\"Valida que el Accept del header contenga */*\",()=>{\r",
							"    pm.expect(pm.request.headers.get(\"Accept\")).to.eql(\"*/*\");\r",
							"});\r",
							"\r",
							"console.log(typeof(pm.response.json().data.items[0].subject));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/highlights/v1/public/highlights?prio=1&cat=2020&lim=3",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"highlights",
						"v1",
						"public",
						"highlights"
					],
					"query": [
						{
							"key": "prio",
							"value": "1"
						},
						{
							"key": "cat",
							"value": "2020"
						},
						{
							"key": "lim",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CrearUsuarioConVariablesDinamicas-401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 401\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(401);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"UNAUTHORIZED\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body contenga ACCOUNT_VERIFICATION_REQUIRED\",()=>{\r",
							"    pm.expect(pm.response.text()).to.include(\"ACCOUNT_VERIFICATION_REQUIRED\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el campo subject sea string body se encuentra el usuario\",()=>{\r",
							"    pm.expect(typeof(pm.response.json().error.code)).to.be.a(\"string\")\r",
							"    pm.expect(pm.response.json().error.code).to.be.a(\"string\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var dinamicEmail = pm.variables.replaceIn(\"{{$randomEmail}}\")\r",
							"pm.environment.set(\"emailDinamico\",dinamicEmail)\r",
							"\r",
							"var dinamicPass = pm.variables.replaceIn(\"{{$randomPassword}}\")\r",
							"pm.environment.set(\"passDinamico\",dinamicPass)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{passDinamico}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{emailDinamico}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic dmVudGFzLWxtYmExQG1haWxpbmF0b3IuY29tOnZlbnRhcy1sbWJhMQ==",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Origin",
						"value": "https://www.segundamano.mx",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"account\":{\"email\":\"{{emailDinamico}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/nga/api/v1.1/private/accounts?lang=es",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"nga",
						"api",
						"v1.1",
						"private",
						"accounts"
					],
					"query": [
						{
							"key": "lang",
							"value": "es"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ObtenerInfoUsuario-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body contenga\",()=>{\r",
							"    pm.expect(pm.response.text()).to.include(\"account_id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body se encuentra el usuario\",()=>{\r",
							"    let user = pm.environment.get(\"email\");\r",
							"    pm.expect(pm.response.text()).to.include(user)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el campo subject sea string body se encuentra el usuario\",()=>{\r",
							"    pm.expect(pm.response.json().access_token).to.be.a(\"string\")\r",
							"});\r",
							"pm.test(\"Validar que el campo email contiene el email esperado\",()=>{\r",
							"    let user = pm.environment.get(\"email\");\r",
							"    pm.expect(pm.response.json().account.email).to.be.eq(pm.environment.get(\"email\"));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"account_id\",pm.response.json().account.account_id)\r",
							"pm.environment.set(\"token\",pm.response.json().access_token)\r",
							"pm.environment.set(\"uuid\",pm.response.json().account.uuid)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let accountID1 = pm.response.json().account.account_id;\r",
							"\r",
							"pm.environment.set(\"account_id_solo\",accountID1.split(\"/\")[3])\r",
							"//console.log(\"response formato texto\",pm.response.text().split(':')[1]);\r",
							"//let response12 = pm.response.text().split(':')[1];\r",
							"//console.log(response12.split(',')[0])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{pass}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{email}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic dmVudGFzLWxtYmExQG1haWxpbmF0b3IuY29tOnZlbnRhcy1sbWJhMQ==",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Origin",
						"value": "https://www.segundamano.mx",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"account\":{\"email\":\"{{email}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/nga/api/v1.1/private/accounts?lang=es",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"nga",
						"api",
						"v1.1",
						"private",
						"accounts"
					],
					"query": [
						{
							"key": "lang",
							"value": "es"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EditarUsuario-200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var nombre = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"nombre\", nombre)\r",
							"\r",
							"var apellido= pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"apellido\", apellido)\r",
							"\r",
							"var telefono= pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"pm.environment.set(\"telefono\", telefono)\r",
							"\r",
							"\r",
							"var randomBoolean= pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"randomBoolean\", randomBoolean)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Validar que se muestre en la respuesta los campos nombre, telefono, profesional estado y telefono\",()=>{\r",
							"    pm.expect(pm.response.json().account).to.include.keys([\"name\",\"phone\",\"professional\",\"phone_hidden\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que los campos nombre, telefono, profesional estado y telefono estado no este vacio\",()=>{\r",
							"    pm.expect(pm.response.json().account.name).is.not.empty;\r",
							"    pm.expect(pm.response.json().account.phone).is.not.empty;\r",
							"    pm.expect(pm.response.json().account.professional).is.not.null;\r",
							"    pm.expect(pm.response.json().account.phone_hidden).is.not.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "tag:scmcoord.com,2013:api {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"account\": {\r\n        \"name\": \"{{nombre}} {{apellido}}\",\r\n        \"phone\": \"{{telefono}}\",\r\n        \"professional\": {{randomBoolean}},\r\n        \"phone_hidden\": {{randomBoolean}}\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/nga/api/v1{{account_id}}?lang=es",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"nga",
						"api",
						"v1{{account_id}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "es"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CrearUnAnuncio-200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var randomProductAdjective = pm.variables.replaceIn(\"{{$randomProductAdjective}}\")\r",
							"pm.environment.set(\"randomProductAdjective\",randomProductAdjective)\r",
							"\r",
							"var randomPhrase = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
							"pm.environment.set(\"randomPhrase\",randomPhrase)\r",
							"\r",
							"var randomInt = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"randomInt\",randomInt)\r",
							"\r",
							"//pre-request\r",
							"let getTokenRequest = {\r",
							"    method: 'POST',\r",
							"    url: 'https://webapi.segundamano.mx/nga/api/v1.1/private/accounts?lang=es',\r",
							"    header:{\r",
							"        Authorization: 'Basic dmVudGFzLWxtYmExQG1haWxpbmF0b3IuY29tOnZlbnRhcy1sbWJhMQ=='\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(getTokenRequest, function(err,response){\r",
							"    console.log(\"Response pre-request: \", response.json())\r",
							"    pm.environment.set(\"token\",response.json().access_token)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"ad_id\",pm.response.json().data.ad.ad_id);\r",
							"\r",
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que la variable de entorno token no este vacio\",()=>{\r",
							"    pm.expect(pm.environment.get(\"token\")).to.not.null;\r",
							"});\r",
							"\r",
							"let requestBody = JSON.parse(pm.request.body.raw);\r",
							"let responsePathValue = pm.response.json().data.ad.thumbnail.path.split(\"/\")[1];\r",
							"\r",
							"pm.test(\"Validar que el nombre de la imagen del request sea igual que el response\",()=>{\r",
							"    pm.expect(requestBody.images).to.eql(responsePathValue);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-source",
						"value": "PHOENIX_DESKTOP",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"images\": \"2240792730.jpg\",\r\n    \"category\": \"4100\",\r\n    \"subject\": \"{{randomProductAdjective}} Compra y venta e intercambio\",\r\n    \"body\": \"{{randomPhrase}}\",\r\n    \"is_new\": \"0\",\r\n    \"region\": \"12\",\r\n    \"municipality\": \"312\",\r\n    \"area\": \"8842\",\r\n    \"price\": \"{{$randomInt}}\",\r\n    \"phone_hidden\": \"true\",\r\n    \"show_phone\": \"false\",\r\n    \"contact_phone\": \"807-441-5132\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/accounts/{{uuid}}/up",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"accounts",
						"{{uuid}}",
						"up"
					]
				}
			},
			"response": []
		},
		{
			"name": "VerAnuncio-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var adID = pm.environment.get(\"ad_id\");\r",
							"pm.test(\"Validar el ID del anuncio\",()=>{\r",
							"    pm.expect(pm.response.json().list_id).to.eql(adID)\r",
							"});\r",
							"//console.log(pm.response.json().list_id);\r",
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/ad-stats/v1/public/accounts/{{account_id_solo}}/ads/{{ad_id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"ad-stats",
						"v1",
						"public",
						"accounts",
						"{{account_id_solo}}",
						"ads",
						"{{ad_id}}"
					],
					"query": [
						{
							"key": "period",
							"value": "7d",
							"disabled": true
						},
						{
							"key": "lang",
							"value": "es",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EditarAnuncio-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el ad_id sea de la respuesta sea igual que el resquest\",()=>{\r",
							"    pm.expect(pm.environment.get(\"ad_id\")).to.eql(pm.response.json().data.ad.ad_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "x-source",
						"value": "PHOENIX_DESKTOP",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"category\": \"8143\",\r\n    \"subject\": \"Organizamos tu evento y mas\",\r\n    \"body\": \"trabajamos todo tipo de eventos, desde bautizos hasta bodas. Pregunte sin compromiso. Hacemos Cotizaciones\",\r\n    \"region\": \"5\",\r\n    \"municipality\": \"51\",\r\n    \"area\": \"36611\",\r\n    \"price\": \"20000\",\r\n    \"phone_hidden\": \"true\",\r\n    \"show_phone\": \"false\",\r\n    \"contact_phone\": \"76013183\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/accounts/{{uuid}}/up/{{ad_id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"accounts",
						"{{uuid}}",
						"up",
						"{{ad_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "VerAnuncioDespuesDeEdicion-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var adID = pm.environment.get(\"ad_id\");\r",
							"pm.test(\"Validar el ID del anuncio\",()=>{\r",
							"    pm.expect(pm.response.json().list_id).to.eql(adID)\r",
							"});\r",
							"\r",
							"console.log(pm.response.json().list_id);\r",
							"\r",
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el ad_id sea de la respuesta sea igual que el resquest\",()=>{\r",
							"    pm.expect(pm.environment.get(\"ad_id\")).to.eql(pm.response.json().list_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/ad-stats/v1/public/accounts/{{account_id_solo}}/ads/{{ad_id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"ad-stats",
						"v1",
						"public",
						"accounts",
						"{{account_id_solo}}",
						"ads",
						"{{ad_id}}"
					],
					"query": [
						{
							"key": "period",
							"value": "7d",
							"disabled": true
						},
						{
							"key": "lang",
							"value": "es",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BorrarAnuncio-403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 403\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(403);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a FORBIDDEN\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"FORBIDDEN\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "tag:scmcoord.com,2013:api {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"delete_reason\": {\r\n        \"code\": \"2\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/nga/api/v1/{{account_id}}/klfst/{{ad_id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"nga",
						"api",
						"v1",
						"{{account_id}}",
						"klfst",
						"{{ad_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ObtenerListadoDirecciones-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"/*pm.test(\"Validar que cada direccion_id response tenga el esquema JSON \",()=>{\r",
							"\r",
							"    const schema = {\r",
							"    \"type\": \"object\"\r",
							"    };\r",
							"\r",
							"    const array = [];\r",
							"    var lengthResponse = Object.keys(pm.response.json().addresses).length;\r",
							"    var JsonResponse = Object.keys(pm.response.json().addresses)\r",
							"    \r",
							"\r",
							"\tfor(var i=0 ; i < lengthResponse ; i++){\r",
							"        var element = JsonResponse[i];\r",
							"        array.push(element);\r",
							"        const ki = JSON.parse(element);  \r",
							"        console.log(pm.response.json().addresses.ki);\r",
							"        pm.expect(pm.response.json().addresses.ki).to.have.jsonSchema(schema);\r",
							"        \r",
							"\r",
							"    }\r",
							"    console.log(array);\r",
							"});*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "es-ES,es;q=0.9",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/addresses/v1/get",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"addresses",
						"v1",
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "CrearDireccion-201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var addressID = pm.response.json().addressID;\r",
							"pm.environment.set(\"direccionID\",addressID);\r",
							"\r",
							"pm.test(\"Validar que el codigo de respuesta sea igual a 201\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a Created\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el addressID response sea igual a la variable de entorno creada\", () => {\r",
							"    pm.expect(pm.response.json().addressID).to.eql(pm.environment.get(\"direccionID\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var direccionAlias = pm.variables.replaceIn(\"{{$randomStreetName}}\");\r",
							"pm.environment.set(\"direccionAlias\",direccionAlias);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "contact",
							"value": "{{nombre}} {{apellido}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "9876543210",
							"type": "text"
						},
						{
							"key": "rfc",
							"value": "XAXX010101000",
							"type": "text"
						},
						{
							"key": "zipCode",
							"value": "11011",
							"type": "text"
						},
						{
							"key": "exteriorInfo",
							"value": "Morelia 45",
							"type": "text"
						},
						{
							"key": "interiorInfo",
							"value": "2",
							"type": "text"
						},
						{
							"key": "region",
							"value": "11",
							"type": "text"
						},
						{
							"key": "municipality",
							"value": "300",
							"type": "text"
						},
						{
							"key": "are",
							"value": "8082",
							"type": "text"
						},
						{
							"key": "alias",
							"value": "{{direccionAlias}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{url_base}}/addresses/v1/create",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"addresses",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "VerDireccion-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"pm.test(\"Validar que el addressID response sea igual a lo que se envia en el request\", () => {\r",
							"    var direccionIdResponse = Object.keys(pm.response.json().addresses);\r",
							"    pm.expect(direccionIdResponse[0]).to.eql(pm.environment.get(\"direccionID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "es-ES,es;q=0.9",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/addresses/v1/get/{{direccionID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"addresses",
						"v1",
						"get",
						"{{direccionID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EditarDireccion-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que dentro del response indique modificacion correcta\", () => {\r",
							"    var responseMessage = pm.response.text().split(\" \")[1];\r",
							"    pm.expect(pm.response.json().message).to.contain(responseMessage);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que dentro del response se muestre la direccionID del request\", () => {\r",
							"    pm.expect(pm.response.json().message).to.contain(pm.environment.get(\"direccionID\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var direccionAlias = pm.variables.replaceIn(\"{{$randomStreetName}}\");\r",
							"pm.environment.set(\"direccionAlias\",direccionAlias);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept-Language",
						"value": "es-ES,es;q=0.9",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": " application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": "https://{{url_base}}",
						"type": "text"
					},
					{
						"key": "refe",
						"value": "https://{{url_base}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "contact",
							"value": "{{apellido}} {{nombre}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "7894561230",
							"type": "text"
						},
						{
							"key": "rfc",
							"value": "XAXX010101000",
							"type": "text"
						},
						{
							"key": "zipCode",
							"value": "21011",
							"type": "text"
						},
						{
							"key": "exteriorInfo",
							"value": "Calle 5",
							"type": "text"
						},
						{
							"key": "interiorInfo",
							"value": "1",
							"type": "text"
						},
						{
							"key": "region",
							"value": "12",
							"type": "text"
						},
						{
							"key": "municipality",
							"value": "300",
							"type": "text"
						},
						{
							"key": "area",
							"value": "8082",
							"type": "text"
						},
						{
							"key": "alias",
							"value": "{{direccionAlias}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{url_base}}/addresses/v1/modify/{{direccionID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"addresses",
						"v1",
						"modify",
						"{{direccionID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "VerDireccionActualizada-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"}\r",
							"});\r",
							"pm.test(\"Validar que el addressID response sea igual a lo que se envia en el request\", () => {\r",
							"    var direccionIdResponse = Object.keys(pm.response.json().addresses);\r",
							"    pm.expect(direccionIdResponse[0]).to.eql(pm.environment.get(\"direccionID\"));\r",
							"});\r",
							"pm.test(\"Validar que el alias response este actualizado\", () => {\r",
							"    pm.expect(pm.response.text()).to.contain(pm.environment.get(\"direccionAlias\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "es-ES,es;q=0.9",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/addresses/v1/get/{{direccionID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"addresses",
						"v1",
						"get",
						"{{direccionID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EditarDireccionSinActualizarDatos-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que dentro del response indique que no se actualizó ningun campo\", () => {\r",
							"    var responseMessage1 = pm.response.text().split(\", \")[1];\r",
							"    var responseMessage2 = responseMessage1.split(\"}\")[0];\r",
							"    var responseMessage3 = responseMessage2.split(\" \")[1];\r",
							"    pm.expect(pm.response.json().error).to.contain(responseMessage3);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar el key del response sea igual a error\", () => {\r",
							"    pm.expect(pm.response.json()).to.have.key(\"error\");\r",
							"});\r",
							"pm.test(\"Validar el nombre\", () => {\r",
							"    pm.expect(pm.response.json()).to.have.key(\"error\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept-Language",
						"value": "es-ES,es;q=0.9",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": " application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": "https://{{url_base}}",
						"type": "text"
					},
					{
						"key": "refe",
						"value": "https://{{url_base}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "contact",
							"value": "{{apellido}} {{nombre}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "7894561230",
							"type": "text"
						},
						{
							"key": "rfc",
							"value": "XAXX010101000",
							"type": "text"
						},
						{
							"key": "zipCode",
							"value": "21011",
							"type": "text"
						},
						{
							"key": "exteriorInfo",
							"value": "Calle 5",
							"type": "text"
						},
						{
							"key": "interiorInfo",
							"value": "1",
							"type": "text"
						},
						{
							"key": "region",
							"value": "12",
							"type": "text"
						},
						{
							"key": "municipality",
							"value": "300",
							"type": "text"
						},
						{
							"key": "area",
							"value": "8082",
							"type": "text"
						},
						{
							"key": "alias",
							"value": "General Spring",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{url_base}}/addresses/v1/modify/{{direccionID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"addresses",
						"v1",
						"modify",
						"{{direccionID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "BorrarDireccion-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"pm.test(\"Validar que la respuesta indique que la direccion se eliminó\", () => {\r",
							"    pm.expect(pm.response.text()).to.contain(\"deleted correctly\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{uuid}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/addresses/v1/delete/{{direccionID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"addresses",
						"v1",
						"delete",
						"{{direccionID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ConsultarSiAnuncioFuePublicado-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta sea igual a 200\",()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Validar que el estado de la respuesta sea igual a OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta sea menor a 1 segundo\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el response tenga el esquema JSON\", () => {\r",
							"const schema = {\r",
							"    \"type\": \"object\"\r",
							"};\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que en la respuesta se muestre el ad_id correcto\",()=>{\r",
							"    pm.expect(pm.response.text()).to.contain(pm.environment.get(\"ad_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ids\": [\r\n        \"{{ad_id}}\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/urls/v1/public/ad-view?lang=es",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"urls",
						"v1",
						"public",
						"ad-view"
					],
					"query": [
						{
							"key": "lang",
							"value": "es"
						}
					]
				}
			},
			"response": []
		}
	]
}